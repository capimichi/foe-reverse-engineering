"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[578],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),v=r,h=u["".concat(s,".").concat(v)]||u[v]||d[v]||o;return n?i.createElement(h,a(a({ref:t},p),{},{components:n})):i.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=v;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},6197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},a="Events",l={unversionedId:"the-game/events",id:"the-game/events",title:"Events",description:"Events are handled in asynchronous way.",source:"@site/docs/the-game/events.md",sourceDirName:"the-game",slug:"/the-game/events",permalink:"/foe-reverse-engineering/docs/the-game/events",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/the-game/events.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Project structure",permalink:"/foe-reverse-engineering/docs/the-game/project-structure"}},s={},c=[{value:"Click",id:"click",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("p",null,"Events are handled in asynchronous way."),(0,r.kt)("h2",{id:"click"},"Click"),(0,r.kt)("p",null,'When you click on a object in the game, "merge-game" file will handle this, and at a certain point it will call this:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'this._listener.onTileEvent("CityInteractionEvent/TILE_CLICKED", a);\n')),(0,r.kt)("p",null,'"a" variable is an object containing x and y coordinates of the clicked tile.'),(0,r.kt)("p",null,"On tile event is like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'_onTileEvent: function(a, b) {\n            b = null != b ? this._snakeIsoEntityContainer.getIsoTile(b.x | 0, b.y | 0) : null;\n            this._cityModel.get_entitiesModeController().processTileEvent(a, b);\n            "CityInteractionEvent/TILE_CLICKED" != a && "CityInteractionEvent/TILE_OVER" != a || this.dispatch(new wl(a,b))\n        },\n')),(0,r.kt)("p",null,"a little more clear:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'_onTileEvent: function(eventType, position) {\n    // Get the isoTile based on the provided position\n    // Convert position.x and position.y to integers using bitwise OR to truncate decimal parts\n    position = position !== null ? this._snakeIsoEntityContainer.getIsoTile(position.x | 0, position.y | 0) : null;\n    \n    // Get the controller responsible for handling entity modes in the city model\n    const entitiesModeController = this._cityModel.get_entitiesModeController();\n    \n    // Process the tile event using the retrieved controller and the isoTile\n    entitiesModeController.processTileEvent(eventType, position);\n    \n    // Check if the eventType indicates a clicked or hover event\n    if (eventType === "CityInteractionEvent/TILE_CLICKED" || eventType === "CityInteractionEvent/TILE_OVER") {\n        // If it\'s a clicked or hover event, dispatch a new event with the eventType and isoTile position\n        this.dispatch(new wl(eventType, position));\n    }\n}\n')),(0,r.kt)("p",null,"Then processTileEvent is called:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"processTileEvent: function(a, b) {\n    this._processEvent(a, b)\n}\n")),(0,r.kt)("p",null,"That calls _processEvent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'_processEvent: function(a, b) {\n    if ("CityInteractionEvent/TILE_CLICKED" != a || !this._blockTileClickEvents) {\n        var c = null;\n        null != b && (c = b.entity);\n        this._lastInteractable = this._getInteractable(c);\n        null != this._currentMode && this._callHandler(a, this._lastInteractable, b)\n    }\n}\n')),(0,r.kt)("p",null,"a little more clear:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'_processEvent: function(eventType, position) {\n    // Check if the event type is "CityInteractionEvent/TILE_CLICKED" and tile click events are not blocked\n    if (eventType !== "CityInteractionEvent/TILE_CLICKED" || !this._blockTileClickEvents) {\n        // Initialize a variable \'c\' to store an entity based on the provided position\n        var entityFromPosition = null;\n        if (position !== null) {\n            entityFromPosition = position.entity;\n        }\n        \n        // Get the interactable associated with the entity from the provided position\n        this._lastInteractable = this._getInteractable(entityFromPosition);\n        \n        // Check if the current mode is not null and call the handler with the event type, interactable, and position\n        if (this._currentMode !== null) {\n            this._callHandler(eventType, this._lastInteractable, position);\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);